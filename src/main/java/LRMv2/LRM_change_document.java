/*
 * Copyright 2016 Anna Eggers - Göttingen State and University Library
 * The work has been developed in the PERICLES Project by Members of the PERICLES Consortium.
 * This project has received funding from the European Union’s Seventh Framework Programme for research, technological
 * development and demonstration under grant agreement no FP7- 601138 PERICLES.
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at:   http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including without
 * limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTIBITLY, or FITNESS FOR A PARTICULAR
 * PURPOSE. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise,
 * unless required by applicable law or agreed to in writing, shall any Contributor be liable for damages, including
 * any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this
 * License or out of the use or inability to use the Work.
 * See the License for the specific language governing permissions and limitation under the License.
 */
package LRMv2;

import com.hp.hpl.jena.ontology.Individual;
import com.hp.hpl.jena.ontology.OntClass;
import com.hp.hpl.jena.ontology.OntModel;
import com.hp.hpl.jena.ontology.OntModelSpec;
import com.hp.hpl.jena.ontology.OntProperty;
import com.hp.hpl.jena.rdf.model.ModelFactory;
import com.hp.hpl.jena.rdf.model.Resource;

/**
 * Vocabulary definitions from LRM-process-document.ttl
 * 
 * @author Auto-generated by schemagen on 24 Jun 2015 10:54
 */
public class LRM_change_document {
	/**
	 * <p>
	 * The ontology CORE_MODEL that holds the vocabulary terms
	 * </p>
	 */
	private static OntModel m_model = ModelFactory.createOntologyModel(
			OntModelSpec.RDFS_MEM, null);

	/**
	 * <p>
	 * The namespace of the vocabulary as a string
	 * </p>
	 */
	public static final String NS = "http://xrce.xerox.com/LRM#";

	/**
	 * <p>
	 * The namespace of the vocabulary as a string
	 * </p>
	 * @return ns
	 * 
	 * @see #NS
	 */
	public static String getURI() {
		return NS;
	}

	/**
	 * <p>
	 * The namespace of the vocabulary as a resource
	 * </p>
	 */
	public static final Resource NAMESPACE = m_model.createResource(NS);

	public static final OntProperty from = m_model
			.createOntProperty("http://xrce.xerox.com/LRM#from");

	public static final OntProperty parameter = m_model
			.createOntProperty("http://xrce.xerox.com/LRM#parameter");

	public static final OntProperty result = m_model
			.createOntProperty("http://xrce.xerox.com/LRM#result");

	public static final OntProperty to = m_model
			.createOntProperty("http://xrce.xerox.com/LRM#to");

	public static final OntClass Activity = m_model
			.createClass("http://xrce.xerox.com/LRM#Activity");

	public static final OntClass ComputeSignature = m_model
			.createClass("http://xrce.xerox.com/LRM#ComputeSignature");

	public static final OntClass ConjunctiveDependency = m_model
			.createClass("http://xrce.xerox.com/LRM#ConjunctiveDependency");

	public static final OntClass CreationEvent = m_model
			.createClass("http://xrce.xerox.com/LRM#CreationEvent");

	public static final OntClass DestructionEvent = m_model
			.createClass("http://xrce.xerox.com/LRM#DestructionEvent");

	public static final OntClass DigitalResource = m_model
			.createClass("http://xrce.xerox.com/LRM#DigitalResource");

	public static final OntClass EndogenousActivity = m_model
			.createClass("http://xrce.xerox.com/LRM#EndogenousActivity");

	public static final OntClass EventHandler = m_model
			.createClass("http://xrce.xerox.com/LRM#EventHandler");

	public static final OntClass ExogenousActivity = m_model
			.createClass("http://xrce.xerox.com/LRM#ExogenousActivity");

	public static final OntClass HandlingAction = m_model
			.createClass("http://xrce.xerox.com/LRM#HandlingAction");

	public static final OntClass Identity = m_model
			.createClass("http://xrce.xerox.com/LRM#Identity");

	public static final OntClass Message = m_model
			.createClass("http://xrce.xerox.com/LRM#Message");

	public static final OntClass RequestXSDValidation = m_model
			.createClass("http://xrce.xerox.com/LRM#RequestXSDValidation");

	public static final OntClass Service = m_model
			.createClass("http://xrce.xerox.com/LRM#Service");

	public static final OntClass TransformationEvent = m_model
			.createClass("http://xrce.xerox.com/LRM#TransformationEvent");

	public static final OntClass UpdateEvent = m_model
			.createClass("http://xrce.xerox.com/LRM#UpdateEvent");

	public static final Individual call1 = m_model.createIndividual(
			"http://xrce.xerox.com/example#call1", RequestXSDValidation);

	/**
	 * <p>
	 * Before the process event, the dependency was like this: { ex:depval a
	 * ex:XmlValidation; lrm:from-document ex:doc1; lrm:from-schema ex:schema1;
	 * lrm:to-report ex:validationReport01 }
	 * </p>
	 */
	public static final Individual depval = m_model.createIndividual(
			"http://xrce.xerox.com/example#depval",
			m_model.createClass("http://xrce.xerox.com/example#XmlValidation"));

	public static final Individual dlt1 = m_model.createIndividual(
			"http://xrce.xerox.com/example#dlt1", TransformationEvent);

	public static final Individual dlt2 = m_model.createIndividual(
			"http://xrce.xerox.com/example#dlt2", CreationEvent);

	public static final Individual dlt3 = m_model.createIndividual(
			"http://xrce.xerox.com/example#dlt3", TransformationEvent);

	public static final Individual dlt4 = m_model.createIndividual(
			"http://xrce.xerox.com/example#dlt4", DestructionEvent);

	/**
	 * <p>
	 * This is the document that might be edited by an external user
	 * </p>
	 */
	public static final Individual doc1 = m_model.createIndividual(
			"http://xrce.xerox.com/example#doc1",
			m_model.createClass("http://xrce.xerox.com/example#XmlDocument"));

	/**
	 * <p>
	 * this task is not detailled: we just know that someone may edit documents
	 * belonging to the ecosystem; therefore, it may induces changes
	 * </p>
	 */
	public static final Individual editionTask = m_model.createIndividual(
			"http://xrce.xerox.com/example#editionTask", ExogenousActivity);

	/**
	 * <p>
	 * changed by a user in the ecosystem
	 * </p>
	 */
	public static final Individual modif = m_model.createIndividual(
			"http://xrce.xerox.com/example#modif", UpdateEvent);

	/**
	 * <p>
	 * This is the XSD schema for validating XHTML documents
	 * </p>
	 */
	public static final Individual schema1 = m_model.createIndividual(
			"http://xrce.xerox.com/example#schema1",
			m_model.createClass("http://xrce.xerox.com/example#XSD"));

	/**
	 * <p>
	 * here, the internal service has to build the right link to the Exogenous
	 * descriptor (ex:doc1)
	 * </p>
	 */
	public static final Individual update = m_model.createIndividual(
			"http://xrce.xerox.com/example#update", UpdateEvent);

	public static final Individual updateManagement = m_model.createIndividual(
			"http://xrce.xerox.com/example#updateManagement",
			EndogenousActivity);

	public static final Individual validationReport01 = m_model
			.createIndividual(
					"http://xrce.xerox.com/example#validationReport01",
					m_model.createClass("http://xrce.xerox.com/example#XmlDocument"));

	public static final Individual validationReport02 = m_model
			.createIndividual(
					"http://xrce.xerox.com/example#validationReport02",
					m_model.createClass("http://xrce.xerox.com/example#XmlDocument"));

	public static final Individual xmlH = m_model.createIndividual(
			"http://xrce.xerox.com/example#xmlH", EventHandler);

	public static final Individual xsdValidation = m_model.createIndividual(
			"http://xrce.xerox.com/example#xsdValidation", Service);

}
