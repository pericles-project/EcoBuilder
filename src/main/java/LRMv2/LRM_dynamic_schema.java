/*
 * Copyright 2016 Anna Eggers - Göttingen State and University Library
 * The work has been developed in the PERICLES Project by Members of the PERICLES Consortium.
 * This project has received funding from the European Union’s Seventh Framework Programme for research, technological
 * development and demonstration under grant agreement no FP7- 601138 PERICLES.
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at:   http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including without
 * limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTIBITLY, or FITNESS FOR A PARTICULAR
 * PURPOSE. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise,
 * unless required by applicable law or agreed to in writing, shall any Contributor be liable for damages, including
 * any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this
 * License or out of the use or inability to use the Work.
 * See the License for the specific language governing permissions and limitation under the License.
 */
package LRMv2;

import models.AbstractModel;
import org.apache.jena.ontology.OntClass;
import org.apache.jena.ontology.OntModel;
import org.apache.jena.ontology.OntModelSpec;
import org.apache.jena.ontology.OntProperty;
import org.apache.jena.rdf.model.ModelFactory;

/**
 * Vocabulary definitions from LRM-dynamic-schema.ttl
 *
 * @author Auto-generated by schemagen on 24 Jun 2015 10:51
 */
public class LRM_dynamic_schema extends AbstractModel {

    public LRM_dynamic_schema() {
        super(NS, "LRM", "The dynamic Linked Resource Model");
        this.model = m_model;
        m_model.createResource(NS);
    }

    /**
     * <p>
     * The ontology CORE_MODEL that holds the vocabulary terms
     * </p>
     */
    private static OntModel m_model = ModelFactory.createOntologyModel(OntModelSpec.RDFS_MEM, null);

    /**
     * <p>
     * The namespace of the vocabulary as a string
     * </p>
     */
    public static final String NS = "http://xrce.xerox.com/LRM#";

    /**
     * <p>
     * The namespace of the vocabulary as a string
     * </p>
     *
     * @see #NS
     */
    public static String getURI() {
        return NS;
    }


    public static final OntProperty activationTime = m_model
            .createOntProperty("http://xrce.xerox.com/LRM#activationTime");

    /**
     * <p>
     * Indicates which activities is the subject of this activity-life dedicated
     * event
     * </p>
     */
    public static final OntProperty activity = m_model.createOntProperty("http://xrce.xerox.com/LRM#activity");

    /**
     * <p>
     * the chunck will be statically analyzed, and all expansion will be
     * realized when possiblethe open variables are translated after unification
     * with signaturedefines the content of the module (uses the formal
     * parameters defined in the signature)
     * </p>
     */
    public static final OntProperty body = m_model.createOntProperty("http://xrce.xerox.com/LRM#body");

    /**
     * <p>
     * An event is triggered by an agent (therefore, by an acting entity)
     * </p>
     */
    public static final OntProperty byAgent = m_model.createOntProperty("http://xrce.xerox.com/LRM#byAgent");

    /**
     * <p>
     * allows attaching descriptions of what the dependendy did process
     * </p>
     */
    public static final OntProperty changed = m_model.createOntProperty("http://xrce.xerox.com/LRM#changed");

    /**
     * <p>
     * Indicates which resource(s) is(are) used while the activity is performed
     * </p>
     */
    public static final OntProperty created = m_model.createOntProperty("http://xrce.xerox.com/LRM#created");

    /**
     * <p>
     * Indicates which resource(s) is(are) used while the activity is performed
     * </p>
     */
    public static final OntProperty deleted = m_model.createOntProperty("http://xrce.xerox.com/LRM#deleted");

    /**
     * <p>
     * Defines which triples of the resource have been deleted (the rdf:subject
     * predicate is defined by the lrm:subject one)
     * </p>
     */
    public static final OntProperty deletion = m_model.createOntProperty("http://xrce.xerox.com/LRM#deletion");

    /**
     * <p>
     * used in addition to the lrm:subject relation to indicate which other
     * resources are involved in the derivation process
     * </p>
     */
    public static final OntProperty derivedFrom = m_model.createOntProperty("http://xrce.xerox.com/LRM#derivedFrom");

    public static final OntProperty desactivationTime = m_model
            .createOntProperty("http://xrce.xerox.com/LRM#desactivationTime");

    public static final OntProperty describedBy = m_model.createOntProperty("http://xrce.xerox.com/LRM#describedBy");

    public static final OntProperty describes = m_model.createOntProperty("http://xrce.xerox.com/LRM#describes");

    public static final OntProperty do_ = m_model.createOntProperty("http://xrce.xerox.com/LRM#do");

    /**
     * <p>
     * Indicates which events were directly produced by the subject activity
     * </p>
     */
    public static final OntProperty emitted = m_model.createOntProperty("http://xrce.xerox.com/LRM#emitted");

    public static final OntProperty endingTime = m_model.createOntProperty("http://xrce.xerox.com/LRM#endingTime");

    public static final OntProperty error = m_model.createOntProperty("http://xrce.xerox.com/LRM#error");

    /**
     * <p>
     * Relates the activity to the agent(s) that execute it
     * </p>
     */
    public static final OntProperty executedBy = m_model.createOntProperty("http://xrce.xerox.com/LRM#executedBy");
    public static final OntProperty executes = m_model.createOntProperty("http://xrce.xerox.com/LRM#executes");

    public static final OntProperty input = m_model.createOntProperty("http://xrce.xerox.com/LRM#input");

    /**
     * <p>
     * Defines which triples of the resource have been inserted (the rdf:subject
     * predicate is defined by the lrm:subject one)
     * </p>
     */
    public static final OntProperty insertion = m_model.createOntProperty("http://xrce.xerox.com/LRM#insertion");

    /**
     * <p>
     * specifies what must be always verified along the whole object life.also
     * relates to the so-called "significant relations" used in digital
     * preservation.
     * </p>
     */
    public static final OntProperty invariant = m_model.createOntProperty("http://xrce.xerox.com/LRM#invariant");

    /**
     * <p>
     * Indicates causal relationships between events
     * </p>
     */
    public static final OntProperty isConsequenceOf = m_model
            .createOntProperty("http://xrce.xerox.com/LRM#isConsequenceOf");

    public static final OntProperty maxCount = m_model.createOntProperty("http://xrce.xerox.com/LRM#maxCount");

    public static final OntProperty on = m_model.createOntProperty("http://xrce.xerox.com/LRM#on");

    public static final OntProperty output = m_model.createOntProperty("http://xrce.xerox.com/LRM#output");

    public static final OntProperty parameter = m_model.createOntProperty("http://xrce.xerox.com/LRM#parameter");

    public static final OntProperty period = m_model.createOntProperty("http://xrce.xerox.com/LRM#period");

    /**
     * <p>
     * Indicates which events were directly received by the subject activity
     * </p>
     */
    public static final OntProperty received = m_model.createOntProperty("http://xrce.xerox.com/LRM#received");

    public static final OntProperty requestedService = m_model
            .createOntProperty("http://xrce.xerox.com/LRM#requestedService");

    /**
     * <p>
     * Indicates which activities were directly resumed by the appearance of the
     * subject event
     * </p>
     */
    public static final OntProperty resumed = m_model.createOntProperty("http://xrce.xerox.com/LRM#resumed");

    /**
     * <p>
     * the chunck will be statically analyzed, and all expansion will be
     * realized when possiblethe open variables are translated after unification
     * with signaturedefines the content of the module (uses the formal
     * parameters defined in the signature)
     * </p>
     */
    public static final OntProperty signature = m_model.createOntProperty("http://xrce.xerox.com/LRM#signature");

    /**
     * <p>
     * This relation is used to express the semantical relations of the
     * resource: it must be compatible with the invariant relation attached to
     * the resource, if any.
     * </p>
     */
    public static final OntProperty specifiedBy = m_model.createOntProperty("http://xrce.xerox.com/LRM#specifiedBy");

    /**
     * <p>
     * Indicates which activities were directly triggered by the appearance of
     * the subject event
     * </p>
     */
    public static final OntProperty started = m_model.createOntProperty("http://xrce.xerox.com/LRM#started");

    public static final OntProperty startingTime = m_model.createOntProperty("http://xrce.xerox.com/LRM#startingTime");

    /**
     * <p>
     * Indicates which activities were directly stopped by the appearance of the
     * subject event
     * </p>
     */
    public static final OntProperty stopped = m_model.createOntProperty("http://xrce.xerox.com/LRM#stopped");

    /**
     * <p>
     * Defines the resource(s)that changed
     * </p>
     */
    public static final OntProperty subject = m_model.createOntProperty("http://xrce.xerox.com/LRM#subject");

    /**
     * <p>
     * Indicates which activities were directly suspended by the appearance of
     * the subject event
     * </p>
     */
    public static final OntProperty suspended = m_model.createOntProperty("http://xrce.xerox.com/LRM#suspended");

    public static final OntProperty time_out = m_model.createOntProperty("http://xrce.xerox.com/LRM#time-out");

    /**
     * <p>
     * Indicates which resource(s) is(are) used while the activity is performed
     * </p>
     */
    public static final OntProperty transformed = m_model.createOntProperty("http://xrce.xerox.com/LRM#transformed");

    /**
     * <p>
     * Relates the activity to event(s) that triggered it
     * </p>
     */
    public static final OntProperty triggeredBy = m_model.createOntProperty("http://xrce.xerox.com/LRM#triggeredBy");

    /**
     * <p>
     * Indicates which resource(s) is(are) used while the activity is performed
     * </p>
     */
    public static final OntProperty used = m_model.createOntProperty("http://xrce.xerox.com/LRM#used");

    /**
     * <p>
     * Indicates which plan is executed by the activity
     * </p>
     */
    public static final OntProperty usedPlan = m_model.createOntProperty("http://xrce.xerox.com/LRM#usedPlan");

    public static final OntProperty warning = m_model.createOntProperty("http://xrce.xerox.com/LRM#warning");

    public static final OntClass AbstractResource = m_model.createClass("http://xrce.xerox.com/LRM#AbstractResource");

    /**
     * <p>
     * allows defining modular constructs
     * </p>
     */
    public static final OntClass Action = m_model.createClass("http://xrce.xerox.com/LRM#Action");

    /**
     * <p>
     * An activity is defined as the effect of the actions performed by some
     * agent(s); as such, it is a blackbox that can be observed and
     * acharacterized through its relationship with the flow of events that
     * influenced it, and also trhough the resources it used. Two particularly
     * distinguished event classes mark the active/inactive status of an
     * activity: begining and termination through lrm:ActivityStarted and
     * lrm:ActivityStopped, as well as the suspension and resuming via
     * lrm:ActivitySuspended and lrm:ActivityResumed. An activity may involve
     * other activities: this can be captured by a specific usage of the
     * lrm:used predicate that also applies to any kind of resources. An
     * activity can be described through a Plan description (as in PROV)at
     * various level of detail depending on the domain-specific needs. The
     * resources created, modified or deleted by an activity can be known on the
     * basis of the corresponding events it generated. Note also that an
     * activity can be either internal, i.e handled by the endogenous
     * infrastructure to manage dynamicity, or external, i.e. occuring in the
     * ecosystem
     * </p>
     */
    public static final OntClass Activity = m_model.createClass("http://xrce.xerox.com/LRM#Activity");

    public static final OntClass ActivityLifeEvent = m_model.createClass("http://xrce.xerox.com/LRM#ActivityLifeEvent");

    public static final OntClass ActivityResumed = m_model.createClass("http://xrce.xerox.com/LRM#ActivityResumed");

    public static final OntClass ActivityStarted = m_model.createClass("http://xrce.xerox.com/LRM#ActivityStarted");

    public static final OntClass ActivityStopped = m_model.createClass("http://xrce.xerox.com/LRM#ActivityStopped");

    public static final OntClass ActivitySuspended = m_model.createClass("http://xrce.xerox.com/LRM#ActivitySuspended");

    public static final OntClass Agent = m_model.createClass("http://xrce.xerox.com/LRM#Agent");

    /**
     * <p>
     * This specific class of event deals with changes: these particular time
     * instant have a significance with respect to modifications of modeled
     * resources (be they endogenous or exogenous)also used to remember actions
     * indertaken in order to maintain the internal consistency of LRM instances
     * (provenance)used to trigger actions required in order to maintain the
     * internal consistency of LRM instances
     * </p>
     */
    public static final OntClass ChangeEvent = m_model.createClass("http://xrce.xerox.com/LRM#ChangeEvent");

    /**
     * <p>
     * A new resource has been created; the lrm:subject designates the class of
     * the created resource
     * </p>
     */
    public static final OntClass CreationEvent = m_model.createClass("http://xrce.xerox.com/LRM#CreationEvent");

    /**
     * <p>
     * Used to describe the differences between two resources
     * </p>
     */
    public static final OntClass Delta = m_model.createClass("http://xrce.xerox.com/LRM#Delta");

    public static final OntClass Dependency = m_model.createClass("http://xrce.xerox.com/LRM#Dependency");

    /**
     * <p>
     * A new resource is created, on the basis of other known existing
     * resource(s); e.g. a copy operation, a merge, ...
     * </p>
     */
    public static final OntClass DerivationEvent = m_model.createClass("http://xrce.xerox.com/LRM#DerivationEvent");

    public static final OntClass Description = m_model.createClass("http://xrce.xerox.com/LRM#Description");

    /**
     * <p>
     * A resource has been deleted
     * </p>
     */
    public static final OntClass DestructionEvent = m_model.createClass("http://xrce.xerox.com/LRM#DestructionEvent");

    public static final OntClass EndogenousActivity = m_model
            .createClass("http://xrce.xerox.com/LRM#EndogenousActivity");

    /**
     * <p>
     * Event generated by the underlying system to track and process internal
     * changes
     * </p>
     */
    public static final OntClass EndogenousChange = m_model.createClass("http://xrce.xerox.com/LRM#EndogenousChange");

    public static final OntClass EndogenousEvent = m_model.createClass("http://xrce.xerox.com/LRM#EndogenousEvent");

    public static final OntClass EndogenousResource = m_model
            .createClass("http://xrce.xerox.com/LRM#EndogenousResource");

    /**
     * <p>
     * EndogenousEvent instances talk about Endogenous resources, whereas
     * ExogenousEvent instances talk about Exogenous resources. Note that both
     * are Endogenous resources.
     * </p>
     */
    public static final OntClass Event = m_model.createClass("http://xrce.xerox.com/LRM#Event");

    public static final OntClass EventHandler = m_model.createClass("http://xrce.xerox.com/LRM#EventHandler");

    public static final OntClass EventsClass = m_model.createClass("http://xrce.xerox.com/LRM#EventsClass");

    public static final OntClass ExogenousActivity = m_model.createClass("http://xrce.xerox.com/LRM#ExogenousActivity");

    /**
     * <p>
     * Event generated through explicit requests to signal changes that occured
     * in the external world
     * </p>
     */
    public static final OntClass ExogenousChange = m_model.createClass("http://xrce.xerox.com/LRM#ExogenousChange");

    public static final OntClass ExogenousEvent = m_model.createClass("http://xrce.xerox.com/LRM#ExogenousEvent");

    public static final OntClass ExogenousResource = m_model.createClass("http://xrce.xerox.com/LRM#ExogenousResource");

    public static final OntClass ExternalService = m_model.createClass("http://xrce.xerox.com/LRM#ExternalService");

    /**
     * <p>
     * A resource has been frozen: only descriptors can evolve
     * </p>
     */
    public static final OntClass FreezeEvent = m_model.createClass("http://xrce.xerox.com/LRM#FreezeEvent");

    /**
     * <p>
     * allows defining actions which signature are dedicated to event handling
     * (receive the instanciated event IRI as input parameter)
     * </p>
     */
    public static final OntClass HandlingAction = m_model.createClass("http://xrce.xerox.com/LRM#HandlingAction");

    public static final OntClass InternalService = m_model.createClass("http://xrce.xerox.com/LRM#InternalService");

    /**
     * <p>
     * used to send or receive information from services
     * </p>
     */
    public static final OntClass Message = m_model.createClass("http://xrce.xerox.com/LRM#Message");

    public static final OntClass MutableResource = m_model.createClass("http://xrce.xerox.com/LRM#MutableResource");

    public static final OntClass Plan = m_model.createClass("http://xrce.xerox.com/LRM#Plan");

    /**
     * <p>
     * used to CORE_MODEL periodic events(max number of occurences may be
     * bounded)
     * </p>
     */
    public static final OntClass RecurringEvent = m_model.createClass("http://xrce.xerox.com/LRM#RecurringEvent");

    public static final OntClass Resource = m_model.createClass("http://xrce.xerox.com/LRM#Resource");

    public static final OntClass Service = m_model.createClass("http://xrce.xerox.com/LRM#Service");

    public static final OntClass ServiceInvocation = m_model.createClass("http://xrce.xerox.com/LRM#ServiceInvocation");

    /**
     * <p>
     * Used to express the semantical relations. could be a formal logical
     * language, a test-oriented prog. language, a formal or informal policy, a
     * textual description...
     * </p>
     */
    public static final OntClass Specification = m_model.createClass("http://xrce.xerox.com/LRM#Specification");

    public static final OntClass TemporalDescription = m_model
            .createClass("http://xrce.xerox.com/LRM#TemporalDescription");

    /**
     * <p>
     * NB: the nature of this transformation can be detailled through
     * subclassing.A resource is transformed in the ecosystem, meaning that the
     * resource changed, keeping the same identity
     * </p>
     */
    public static final OntClass TransformationEvent = m_model
            .createClass("http://xrce.xerox.com/LRM#TransformationEvent");

    /**
     * <p>
     * The resource is updated (e.g. its digital extension changed), but no
     * other direct impact is observed yet on other resources
     * </p>
     */
    public static final OntClass UpdateEvent = m_model.createClass("http://xrce.xerox.com/LRM#UpdateEvent");

    @Override
    public void createModelEntities() {
    }

    @Override
    public void createModelRelations() {
    }
}
