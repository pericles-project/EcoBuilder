/*
 * Copyright 2016 Anna Eggers - Göttingen State and University Library
 * The work has been developed in the PERICLES Project by Members of the PERICLES Consortium.
 * This project has received funding from the European Union’s Seventh Framework Programme for research, technological
 * development and demonstration under grant agreement no FP7- 601138 PERICLES.
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at:   http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including without
 * limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTIBITLY, or FITNESS FOR A PARTICULAR
 * PURPOSE. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise,
 * unless required by applicable law or agreed to in writing, shall any Contributor be liable for damages, including
 * any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this
 * License or out of the use or inability to use the Work.
 * See the License for the specific language governing permissions and limitation under the License.
 */
package LRMv2;

import com.hp.hpl.jena.ontology.OntClass;
import com.hp.hpl.jena.ontology.OntModel;
import com.hp.hpl.jena.ontology.OntModelSpec;
import com.hp.hpl.jena.ontology.OntProperty;
import com.hp.hpl.jena.rdf.model.ModelFactory;
import com.hp.hpl.jena.rdf.model.Property;
import com.hp.hpl.jena.rdf.model.Resource;
import models.AbstractModel;

/**
 * Vocabulary definitions from LRM-static-schema.ttl
 *
 * @author Auto-generated by schemagen on 24 Jun 2015 10:47
 */
public class LRM_static_schema extends AbstractModel {

    public LRM_static_schema() {
        super(NS, "LRM", "The static Linked Resource Model");
        this.model = m_model;
    }

    /**
     * <p>
     * The ontology CORE_MODEL that holds the vocabulary terms
     * </p>
     */
    private static OntModel m_model = ModelFactory.createOntologyModel(OntModelSpec.RDFS_MEM, null);

    /**
     * <p>
     * The namespace of the vocabulary as a string
     * </p>
     */
    public static final String NS = "http://xrce.xerox.com/LRM#";

    /**
     * <p>
     * The namespace of the vocabulary as a string
     * </p>
     *
     * @see #NS
     */
    public static String getURI() {
        return NS;
    }

    /**
     * <p>
     * The namespace of the vocabulary as a resource
     * </p>
     */
    public static final Resource NAMESPACE = m_model.createResource(NS);

    public static final OntProperty accessProtocol = m_model
            .createOntProperty("http://xrce.xerox.com/LRM#accessProtocol");

    public static final OntProperty activationTime = m_model
            .createOntProperty("http://xrce.xerox.com/LRM#activationTime");

    public static final OntProperty birthTime = m_model.createOntProperty("http://xrce.xerox.com/LRM#birthTime");

    public static final OntProperty deathTime = m_model.createOntProperty("http://xrce.xerox.com/LRM#deathTime");

    /**
     * <p>
     * This relation allows defining formally a resource; note that the range of
     * this relation is open
     * </p>
     */
    public static final OntProperty definition = m_model.createOntProperty("http://xrce.xerox.com/LRM#definition");

    public static final OntProperty desactivationTime = m_model
            .createOntProperty("http://xrce.xerox.com/LRM#desactivationTime");

    public static final OntProperty describedBy = m_model.createOntProperty("http://xrce.xerox.com/LRM#describedBy");

    /**
     * <p>
     * correspond to a duration
     * </p>
     */
    public static final OntProperty durationTime = m_model.createOntProperty("http://xrce.xerox.com/LRM#durationTime");

    /**
     * <p>
     * could be a checksum or any digital signature that uniquely represents the
     * bitstream extension of the digital object
     * </p>
     */
    public static final OntProperty fingerprint = m_model.createOntProperty("http://xrce.xerox.com/LRM#fingerprint");

    public static final OntProperty from = m_model.createOntProperty("http://xrce.xerox.com/LRM#from");

    public static final OntProperty hasMember = m_model.createOntProperty("http://xrce.xerox.com/LRM#hasMember");

    public static final OntProperty hasPart = m_model.createOntProperty("http://xrce.xerox.com/LRM#hasPart");

    /**
     * <p>
     * an Identity instance uniquely identifies a resource (hence the functional
     * relation)
     * </p>
     */
    public static final OntProperty identification = m_model
            .createOntProperty("http://xrce.xerox.com/LRM#identification");

    /**
     * <p>
     * Designates the lrm:Plan instance that characterizes how the process of a
     * dependee(s) impacts the depending resource(s): what must be done if the
     * dependency is activated
     * </p>
     */
    public static final OntProperty impact = m_model.createOntProperty("http://xrce.xerox.com/LRM#impact");

    /**
     * <p>
     * useful when a Plan is defined through an exogenous resource, e.g. a
     * source file
     * </p>
     */
    public static final OntProperty implementedBy = m_model
            .createOntProperty("http://xrce.xerox.com/LRM#implementedBy");

    /**
     * <p>
     * This relation allows describing, formally or not, the intented usage of
     * the resource (answer to the WHY question)
     * </p>
     */
    public static final OntProperty intention = m_model.createOntProperty("http://xrce.xerox.com/LRM#intention");

    public static final OntProperty isMemberOf = m_model.createOntProperty("http://xrce.xerox.com/LRM#isMemberOf");

    public static final OntProperty lifeTime = m_model.createOntProperty("http://xrce.xerox.com/LRM#lifeTime");

    /**
     * <p>
     * distinct resources cannot have the same location descriptor(hence the
     * inverse functional relation)
     * </p>
     */
    public static final OntProperty location = m_model.createOntProperty("http://xrce.xerox.com/LRM#location");

    public static final OntProperty partOf = m_model.createOntProperty("http://xrce.xerox.com/LRM#partOf");

    /**
     * <p>
     * Designates the lrm:Plan instance that characterizes the conditions for
     * the process of dependee(s) to trigger a process propagation to depending
     * resources.
     * </p>
     */
    public static final OntProperty precondition = m_model.createOntProperty("http://xrce.xerox.com/LRM#precondition");

    /**
     * <p>
     * This must be used to link an abstract resource to one or several concrete
     * realizations of it
     * </p>
     */
    public static final OntProperty realizedAs = m_model.createOntProperty("http://xrce.xerox.com/LRM#realizedAs");

    public static final OntProperty realizedBy = m_model.createOntProperty("http://xrce.xerox.com/LRM#realizedBy");

    /**
     * <p>
     * This relation describes, formally or not, the resource itself (answer to
     * the WHAT question ; not to be confused with version:specification)
     * </p>
     */
    public static final OntProperty specification = m_model
            .createOntProperty("http://xrce.xerox.com/LRM#specification");

    public static final OntProperty to = m_model.createOntProperty("http://xrce.xerox.com/LRM#to");

    /**
     * <p>
     * could be a checksum or any digital signature that uniquely represents the
     * bitstream extension of the digital object
     * </p>
     */
    public static final OntProperty uniqueIdentification = m_model
            .createOntProperty("http://xrce.xerox.com/LRM#uniqueIdentification");

    /**
     * <p>
     * The acronym URL stands fo Uniform Resource Locator...
     * </p>
     */
    public static final OntProperty url = m_model.createOntProperty("http://xrce.xerox.com/LRM#url");

    public static final OntClass AbstractResource = m_model.createClass("http://xrce.xerox.com/LRM#AbstractResource");

    /**
     * <p>
     * An agent is an entity that performs actions, i.e transformative
     * operations over the exogenous/endogenous ecosystem
     * </p>
     */
    public static final OntClass Agent = m_model.createClass("http://xrce.xerox.com/LRM#Agent");

    /**
     * <p>
     * Mereology (from the Greek ?????, 'part') is the theory of parthood
     * relations: of the relations of part to whole and the relations of part to
     * part within a whole.
     * </p>
     */
    public static final OntClass AggregatedResource = m_model
            .createClass("http://xrce.xerox.com/LRM#AggregatedResource");

    public static final OntClass ConcreteResource = m_model.createClass("http://xrce.xerox.com/LRM#ConcreteResource");

    /**
     * <p>
     * all 'lrm:from' resources are needed by the 'lrm:to' resources for the
     * intended usage
     * </p>
     */
    public static final OntClass ConjunctiveDependency = m_model
            .createClass("http://xrce.xerox.com/LRM#ConjunctiveDependency");

    /**
     * <p>
     * A dependency, according to the LRM CORE_MODEL, is oriented, and may relate
     * at least one lrm:Resource instance to at least one lrm:Resource instance.
     * One dependency instance may bind several resources together: this
     * captures the 'co-dependencies' phenomenon, also named 'conjunctive
     * dependencies', meaning that all resources must be considered
     * simultaneously, together as a whole. Disjunctive dependencies are
     * naturally expressed using different instances relating the same set of
     * resources. The semantics of the instances of this dependency class is
     * conveyed by an instance of lrm:Plan. This last may give information about
     * the intent (WHY), its specification (WHAT), and how it is satisfied (HOW
     * see lrm:Plan, lrm:Description). When 'how' is specified, it involves an
     * Agent to perform the plan.
     * </p>
     */
    public static final OntClass Dependency = m_model.createClass("http://xrce.xerox.com/LRM#Dependency");

    /**
     * <p>
     * gives information about a resource, e.g. why it exists (intention), what
     * it is for (specification), ...
     * </p>
     */
    public static final OntClass Description = m_model.createClass("http://xrce.xerox.com/LRM#Description");

    /**
     * <p>
     * Jens[conf. Thibodeau/terminology overview (pericles internal documents)]:
     * a technical object, processable by machines/computers (e.g. a set of
     * files), as opposed to the physical or intellectual objectA data structure
     * that can be located by a dedicated descriptor, and having a unique
     * identifier. The extension of a digital resource is a bit stream that can
     * be fetched using the location descriptor.
     * </p>
     */
    public static final OntClass DigitalResource = m_model.createClass("http://xrce.xerox.com/LRM#DigitalResource");

    public static final OntClass DigitalSignature = m_model.createClass("http://xrce.xerox.com/LRM#DigitalSignature");

    /**
     * <p>
     * only one among the 'lrm:from' resources is needed by the 'lrm:to'
     * resources for the intended usage (can choose anyone)
     * </p>
     */
    public static final OntClass DisjunctiveDependency = m_model
            .createClass("http://xrce.xerox.com/LRM#DisjunctiveDependency");

    public static final OntClass EndogenousResource = m_model
            .createClass("http://xrce.xerox.com/LRM#EndogenousResource");

    public static final OntClass ExogenousResource = m_model.createClass("http://xrce.xerox.com/LRM#ExogenousResource");

    public static final OntClass HumanAgent = m_model.createClass("http://xrce.xerox.com/LRM#HumanAgent");

    /**
     * <p>
     * The identity of an Resource is uniquely defined via an instance of class
     * lrm:Identity. Although the structure of those instances are not defined
     * at this level, it may use UUID mechanisms such as defined in RFC 4122.
     * </p>
     */
    public static final OntClass Identity = m_model.createClass("http://xrce.xerox.com/LRM#Identity");

    public static final OntClass ImmutableResource = m_model.createClass("http://xrce.xerox.com/LRM#ImmutableResource");

    /**
     * <p>
     * Location descriptor is information about retrieving the concrete
     * resource.
     * </p>
     */
    public static final OntClass Location = m_model.createClass("http://xrce.xerox.com/LRM#Location");

    public static final OntClass MutableResource = m_model.createClass("http://xrce.xerox.com/LRM#MutableResource");

    public static final OntClass Organization = m_model.createClass("http://xrce.xerox.com/LRM#Organization");

    /**
     * <p>
     * Plans are specialized descriptions intended to be executed by some agent
     * (either human or software based); this is thus a mean to give abstract or
     * concrete operational semantics to dependencies.
     * </p>
     */
    public static final OntClass Plan = m_model.createClass("http://xrce.xerox.com/LRM#Plan");

    /**
     * <p>
     * explain the method/protocol used to retrieve a concrete resource (e.g.
     * http, ftp, or an informal textual description).
     * </p>
     */
    public static final OntClass Protocol = m_model.createClass("http://xrce.xerox.com/LRM#Protocol");

    /**
     * <p>
     * Endogenous resources talk about the representation system, whereas
     * Exogenous resources talk about the ecosystemIn our view, abstract
     * resources have no physical extension. However, they may be delimited in
     * time, and thus may have a temporal support; they also may be subject to
     * changes. In our view, concrete resources have a physical and temporal
     * extension. As such, they can be located in space and time, and the nature
     * of their physical extension may be described accordingly (e.g. mass,
     * size, volumes, mereological organization...).Immutable resources cannot
     * changeMutable resources can process
     * </p>
     */
    public static final OntClass Resource = m_model.createClass("http://xrce.xerox.com/LRM#Resource");

    public static final OntClass SoftwareAgent = m_model.createClass("http://xrce.xerox.com/LRM#SoftwareAgent");

    /**
     * <p>
     * Used to provide spacial knowledge about the resource
     * </p>
     */
    public static final OntClass SpatialDescription = m_model
            .createClass("http://xrce.xerox.com/LRM#SpatialDescription");

    /**
     * <p>
     * Used to provide temporal knowledge about the resource
     * </p>
     */
    public static final OntClass TemporalDescription = m_model
            .createClass("http://xrce.xerox.com/LRM#TemporalDescription");

    public static final OntProperty describes = m_model.createOntProperty("http://xrce.xerox.com/LRM#describes");

    public static final OntProperty realizes = m_model.createOntProperty("http://xrce.xerox.com/LRM#realizes");

    public static final OntClass Intention = m_model
            .createClass("http://xrce.xerox.com/LRM#Intention");

    @Override
    public void createModelEntities() {
    }

    public static Property from_property;
    public static Property to_property;

    @Override
    public void createModelRelations() {
        //TODO: new RelationBuilder.wrap(OntProperty relation)
//        from_property = new Relation(this, "from", from, "");
//        to_property = new Relation(this, "to", to, "");
        from_property = model.createProperty("http://xrce.xerox.com/LRM#dfrom");
        to_property = model.createProperty("http://xrce.xerox.com/LRM#to");
    }
}
